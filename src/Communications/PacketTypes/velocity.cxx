// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file velocity.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Communication/PacketTypes/velocity.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Velocity::Velocity()
{
    // m_timeOccured com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4abdb505
    m_timeOccured = 0;
    // m_timeSent com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7ce6a65d
    m_timeSent = 0;
    // m_vel com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1500955a
    m_vel = 0.0;

}

Velocity::~Velocity()
{



}

Velocity::Velocity(
        const Velocity& x)
{
    m_timeOccured = x.m_timeOccured;
    m_timeSent = x.m_timeSent;
    m_vel = x.m_vel;
}

Velocity::Velocity(
        Velocity&& x)
{
    m_timeOccured = x.m_timeOccured;
    m_timeSent = x.m_timeSent;
    m_vel = x.m_vel;
}

Velocity& Velocity::operator =(
        const Velocity& x)
{

    m_timeOccured = x.m_timeOccured;
    m_timeSent = x.m_timeSent;
    m_vel = x.m_vel;

    return *this;
}

Velocity& Velocity::operator =(
        Velocity&& x)
{

    m_timeOccured = x.m_timeOccured;
    m_timeSent = x.m_timeSent;
    m_vel = x.m_vel;

    return *this;
}

bool Velocity::operator ==(
        const Velocity& x) const
{

    return (m_timeOccured == x.m_timeOccured && m_timeSent == x.m_timeSent && m_vel == x.m_vel);
}

bool Velocity::operator !=(
        const Velocity& x) const
{
    return !(*this == x);
}

size_t Velocity::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t Velocity::getCdrSerializedSize(
        const Velocity& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Velocity::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_timeOccured;
    scdr << m_timeSent;
    scdr << m_vel;

}

void Velocity::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_timeOccured;
    dcdr >> m_timeSent;
    dcdr >> m_vel;
}

/*!
 * @brief This function sets a value in member timeOccured
 * @param _timeOccured New value for member timeOccured
 */
void Velocity::timeOccured(
        int32_t _timeOccured)
{
    m_timeOccured = _timeOccured;
}

/*!
 * @brief This function returns the value of member timeOccured
 * @return Value of member timeOccured
 */
int32_t Velocity::timeOccured() const
{
    return m_timeOccured;
}

/*!
 * @brief This function returns a reference to member timeOccured
 * @return Reference to member timeOccured
 */
int32_t& Velocity::timeOccured()
{
    return m_timeOccured;
}

/*!
 * @brief This function sets a value in member timeSent
 * @param _timeSent New value for member timeSent
 */
void Velocity::timeSent(
        int32_t _timeSent)
{
    m_timeSent = _timeSent;
}

/*!
 * @brief This function returns the value of member timeSent
 * @return Value of member timeSent
 */
int32_t Velocity::timeSent() const
{
    return m_timeSent;
}

/*!
 * @brief This function returns a reference to member timeSent
 * @return Reference to member timeSent
 */
int32_t& Velocity::timeSent()
{
    return m_timeSent;
}

/*!
 * @brief This function sets a value in member vel
 * @param _vel New value for member vel
 */
void Velocity::vel(
        float _vel)
{
    m_vel = _vel;
}

/*!
 * @brief This function returns the value of member vel
 * @return Value of member vel
 */
float Velocity::vel() const
{
    return m_vel;
}

/*!
 * @brief This function returns a reference to member vel
 * @return Reference to member vel
 */
float& Velocity::vel()
{
    return m_vel;
}


size_t Velocity::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool Velocity::isKeyDefined()
{
    return false;
}

void Velocity::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}
